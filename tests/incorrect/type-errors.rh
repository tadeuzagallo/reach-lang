// RUN: %not %reach | %check

function f(x: Number) -> Number {
    "asd" // CHECK: 4:5: Unification failure: expected `Number` but found `String`
}
g; // CHECK: :6:1: Unknown variable: `g`
f(1,2); // CHECK: 7:1: Argument count mismatch
f("asd"); // CHECK: 8:3: Unification failure: expected `Number` but found `String`

let x = 1;
x(); // CHECK: 11:1: Callee is not a function

function g(x: Number[]) -> Number[] {
    x
}
// TODO: better error message
g([""]) // CHECK-L: 17:3: Unification failure: expected `Number` but found `String`

function f(x: <String, Number, Number>) -> <String, Number, Number> {
    x
}
f((1, 2, 3)) // CHECK-L: 22:3: Unification failure: expected `String` but found `Number`
f(("1", 2)) // CHECK-L: 23:3: Unification failure: expected `<String, Number, Number>` but found `<String, Number>`

function id(x: Number) -> Number { x }
function f() -> Number { 13 }
let x = { id = f };
x.id() // CHECK-L: 28:1: Unification failure: expected `Number` but found `{id: () -> Number}`

// Allow parsing operators that contain unknown tokens (tokens that are not meaningful on their own)
1 #### 2 // CHECK-L: 31:3: Unknown variable: `####`

// record checking
function f(x: {x: String}) -> String { x.x }
f({}) // CHECK-L: 35:3: Unification failure: expected `{x: String}` but found `{:}`

let x : Number = "" // CHECK-L: 37:18: Unification failure: expected `Number` but found `String`

// union types
function f(x: Number | String) -> Void { }
// TODO: better error
f(false) // CHECK-L: 42:3: Unification failure: expected `String` but found `Bool`

// Union should not collapse on right (would be T-UnionRec-R)
function f(x: {x: Number, y: Number} | {x: Number, z: Number}) -> {x: Number} { x }
f({x = 42}) // CHECK-L: 46:3: Unification failure: expected `{z: Number, x: Number}` but found `{x: Number}`


function isSingleton(b: Bool) -> Type { if (b) Number else Number[] }
function mkSingle(x: Bool, y: Bool, z: isSingleton(y)) -> isSingleton(x) {
    z // CHECK-L: 51:5: Unification failure: expected `isSingleton(x)` but found `isSingleton(y)`
}
