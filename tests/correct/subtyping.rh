// RUN: %reach | %check

function inspect(%T: Type, x: T) -> Void
{
    print(x.stringify())
    print(" : ")
    println(T.stringify())
}

// RECORDS
// width
function f(x: {x: String}) -> {:} { x }
inspect(f({ x = "", y = 42 })) // CHECK-L: {y = 42, x = ""} : {:}

// permutation
function f(x: {y: Number, x: String}) -> {x: String, y: Number} { x }
inspect(f({ x = "", y = 42 })) // CHECK-L: {y = 42, x = ""} : {y: Number, x: String}

// depth
function f(x: {x: {x: String}}) -> {x: {:}} { x }
inspect(f({x = { x = "", y = 42 }})) // CHECK-L: {x = {y = 42, x = ""}} : {x: {:}}

// TUPLES
// width
function f(x: <Bool, String, Number>) -> <Bool, String> { x }
inspect(f((true, "", 42, []))) // CHECK-L: (true, "", 42, []) : <Bool, String>

// depth
function f(x: <Bool, {x: String}>) -> <Bool, {:}> { x }
inspect(f((true, { x = "", y = 42 }))) // CHECK-L: (true, {y = 42, x = ""}) : <Bool, {:}>

// ARRAYS
// depth
function f(x: {x: String}[]) -> {:}[] { x }
inspect(f([{x = "", y = 42}])) // CHECK-L: [{y = 42, x = ""}] : {:}[]

// FUNCTION
function f(x: ({x: String, y: Number}) -> {x: String}) -> ({x: String, y: Number, z: Bool}) -> {:} { x }
function g(x: {x: String}) -> {x: String, y: Number}  { {x = x.x, y = 1 } }
inspect(f(g)) // CHECK-L: <function g> : ({z: Bool, y: Number, x: String}) -> {:}

// LET
let x : {x: Number} = {x = 1, y = 2}
inspect(x) // CHECK-L: {y = 2, x = 1} : {x: Number}

// UNION
// T-UnionRecord-L
let x : {x: Number} | {x: String} = {x = 42}
x.x

// T-UnionRecord-L (2)
function f(x: {x: Number, y: Number} | {x: Number, z: Number}) -> {x: Number} { x }
f({x = 42, y = 1})

// T-Union-R
let x : String | Number = 42

// NOTE: T-Union-L cannot be tested individually, since it would require that
// S | T <: U, where U is neither a union nor a record. The only type that would
// hipotetically satisfy this condition would be âŠ¤, but that is handled by T-Top.
//
// T-Union-L & T-Union-R
function f(x: String | Number | Bool) -> Void { }
f(x)
